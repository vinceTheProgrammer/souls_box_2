@using Sandbox;
@using Sandbox.UI;
@using SoulsBox;
@using System;
@inherits PanelComponent;

<root>
    @if (CurrentScreen == MenuScreen.Bonfire)
    {
        <MenuBonfire Player=@(Player)/>
    } else {
        <div class="big-box">
            <div class="top-row">
                <div class="top-row-left">
                    <p class="menu-heading">@CurrentScreen.ToString()</p>
                    <p class="menu-subheading">@GetMenuScreenDescription(CurrentScreen)</p>
                </div>
                <div class="top-row-right">
                    <div class="category-bar category-bar-menu">
                        @foreach (var category in MenuCategories)
                        {
                            <div class="category-icon category-icon-fix @(category == CurrentScreen ? "selected" : "")" @onclick=@(() => SetCurrentScreen(category))>
                                <i>@GetMenuScreenIcon(category)</i>
                            </div>
                        }
                    </div>
                </div>
            </div>

            <div class="menu-content">
                @if (CurrentScreen == MenuScreen.Status)
                {
                    <MenuStatus Stats=@(Player.CharacterStats) Vitals=@(Player.CharacterVitals) PlayerStats=@(Player.PlayerStats)/>
                } else if (CurrentScreen == MenuScreen.Settings)
                {
                    <MenuSettings @ref=MenuSet Parent=@(this) />
                } else if (CurrentScreen == MenuScreen.Equipment)
                {
                    <MenuEquipment @ref=MenuEqu Parent=@(this) Stats=@(Player.CharacterStats) Vitals=@(Player.CharacterVitals) PlayerStats=@(Player.PlayerStats) Equipment=@(Player.CharacterEquipment) Inventory=@(Player.CharacterInventory)/>
                } else if (CurrentScreen == MenuScreen.Inventory)
                {
                    <MenuInventory @ref=MenuInv CategoriesComponent=@(InventoryCategories) Stats=@(Player.CharacterStats) Vitals=@(Player.CharacterVitals) PlayerStats=@(Player.PlayerStats) Inventory=@(Player.CharacterInventory) Category=@(GetItemCategory(InventoryCategories.SelectedCategory)) SelectedIndex=@(InventoryItemIndex) LastMoveUp=@(InventoryLastMoveUp)/>
                }
            </div>

            <div class="bottom-row">
                @foreach (var action in AvailableActions)
                {
                    <div class="glyph-div">
                        <Image class="glyph" Texture=@action.GetTexture() />
                        <label>:@action.DisplayText</label>
                    </div>
                }
            </div>
        </div>
    }
</root>

@code
{
    [Property] public AgentPlayer Player { get; set; }

    public enum MenuScreen
    {
        Status,
        Equipment,
        Inventory,
        Settings,
        Bonfire
    }

    public MenuScreen CurrentScreen { get; set; } = MenuScreen.Settings;

    private int CurrentMenuCategoryIndex { get; set; } = 3;

    private List<MenuScreen> MenuCategories = new();

    public CategoriesComponent InventoryCategories = new();

    public List<SBAction> AvailableActions = new();

    public MenuInventory MenuInv { get; set; }
    public MenuSettings MenuSet { get; set; }
    public MenuEquipment MenuEqu { get; set; }

    public List<SBAction> GlyphsStatus = new List<SBAction>
    {
        new SBAction { ActionString = "sb_menu_thirdly", DisplayText = "Toggle Display" },
        new SBAction { ActionString = "sb_menu_back", DisplayText = "Close" },
        //new SBAction { ActionString = "sb_menu_info", DisplayText = "Explanation" }
    };

    public List<SBAction> GlyphsEquipment = new List<SBAction>
    {
        new SBAction { ActionString = "sb_menu_select", DisplayText = "Enter" },
        new SBAction { ActionString = "sb_menu_back", DisplayText = "Close" },
        new SBAction { ActionString = "sb_menu_secondary", DisplayText = "Unequip Item" },
        new SBAction { ActionString = "sb_menu_thirdly", DisplayText = "Toggle Status" }
    };

    public List<SBAction> GlyphsItemSelect = new List<SBAction>
    {
        new SBAction { ActionString = "sb_menu_select", DisplayText = "Equip" },
        new SBAction { ActionString = "sb_menu_back", DisplayText = "Close" },
        new SBAction { ActionString = "sb_menu_secondary", DisplayText = "Toggle Display" },
        new SBAction { ActionString = "sb_menu_thirdly", DisplayText = "Toggle Status" }
    };

    public List<SBAction> GlyphsInventory = new List<SBAction>
    {
        new SBAction { ActionString = "sb_menu_select", DisplayText = "Item Menu" },
        new SBAction { ActionString = "sb_menu_back", DisplayText = "Close" },
        new SBAction { ActionString = "sb_menu_secondary", DisplayText = "Toggle Display" },
        new SBAction { ActionString = "sb_menu_thirdly", DisplayText = "Toggle Status" }
    };

    public List<SBAction> GlyphsItemMenu = new List<SBAction>
    {
        new SBAction { ActionString = "sb_menu_select", DisplayText = "Enter" },
        new SBAction { ActionString = "sb_menu_back", DisplayText = "Close" }
    };

    public List<SBAction> GlyphsSettings = new List<SBAction>
    {
        new SBAction { ActionString = "sb_menu_select", DisplayText = "Enter" },
        new SBAction { ActionString = "sb_menu_back", DisplayText = "Close" }
    };

    public List<SBAction> GlyphsEmpty = new();

    public int InventoryItemIndex = 0;
    public bool InventoryLastMoveUp { get; set; }

    public enum GlyphSet {
        None,
        GlyphsStatus,
        GlyphsEquipment,
        GlyphsItemSelect,
        GlyphsInventory,
        GlyphsItemMenu,
        GlyphsSettings,
        GlyphsEmpty
    }


    protected override void OnStart()
    {
        MenuCategories.Add(MenuScreen.Inventory);
        MenuCategories.Add(MenuScreen.Equipment);
        MenuCategories.Add(MenuScreen.Status);
        MenuCategories.Add(MenuScreen.Settings);

        InventoryCategories.Add("Usable", "science", false);
        InventoryCategories.Add("Shards", "diamond", false);
        InventoryCategories.Add("Keys", "vpn_key", false);
        InventoryCategories.Add("Sorceries", "auto_fix_high", false);
        InventoryCategories.Add("Weapons", "icons/sword.svg", true);
        InventoryCategories.Add("Arrows", "icons/arrow.svg", true);
        InventoryCategories.Add("Armor", "icons/helmet.svg", true);
        InventoryCategories.Add("Rings", "icons/ring.svg", true);
        InventoryCategories.SelectedCategory = InventoryCategories.Categories[0];

        GlyphSet glyphSet = GetGlyphSet(CurrentScreen);
        SetGlyphs(glyphSet);
    }

    protected override int BuildHash()
    {
        if (Player == null) return 1;
        HashCode playerHashCode = new HashCode();
        playerHashCode.Add(Player.CharacterStats);
        playerHashCode.Add(Player.CharacterVitals);
        playerHashCode.Add(Player.PlayerStats);
        playerHashCode.Add(Player.CharacterInventory);
        playerHashCode.Add(Player.CharacterEquipment);
        return System.HashCode.Combine(CurrentScreen, playerHashCode.ToHashCode(), InventoryCategories, InventoryItemIndex, AvailableActions);
    }

    protected override void OnUpdate()
    {
        if (Player == null)
        {
            Player = Game.ActiveScene.GetAllComponents<AgentPlayer>().FirstOrDefault(x => !x.Network.IsProxy);
        }

        if (Input.Pressed("sb_menu_select")) HandleSelect();

        if (Input.Pressed("sb_menu_secondary")) HandleSecondary();

        if (Input.Pressed("sb_menu_thirdly")) HandleThirdly();

        if (Input.Pressed("sb_menu_back")) HandleBack();

        if (Input.Pressed("sb_menu_cycle_left") || Input.Pressed("sb_menu_cycle_left_alt")) HandleCycle(false);
        else if (Input.Pressed("sb_menu_cycle_right")) HandleCycle(true);

        if (Input.Pressed("sb_menu_up")) HandleVertical(true);
        else if (Input.Pressed("sb_menu_down")) HandleVertical(false);
        else if (Input.Pressed("sb_menu_left")) HandleHorizontal(false);
        else if (Input.Pressed("sb_menu_right")) HandleHorizontal(true);
    }

    private void HandleSelect()
    {
        if (CurrentScreen == MenuScreen.Equipment)
        {
            MenuEqu.HandleSelect();
        }
    }

    private void HandleBack()
    {
        if (CurrentScreen == MenuScreen.Equipment)
        {
            MenuEqu.HandleBack();
        }
    }

    private void HandleSecondary()
    {
        if (CurrentScreen == MenuScreen.Equipment)
        {
            MenuEqu.HandleSecondary();
        }

    }

    private void HandleThirdly()
    {
        if (CurrentScreen == MenuScreen.Inventory)
        {
            if (MenuInv.SelectedStatus == 2) MenuInv.SelectedStatus = 0;
            else MenuInv.SelectedStatus += 1;
        }
        if (CurrentScreen == MenuScreen.Equipment)
        {
            if (MenuEqu.SelectedStatus == 2) MenuEqu.SelectedStatus = 0;
            else MenuEqu.SelectedStatus += 1;
        }

    }

    private void HandleVertical(bool isUp)
    {
        if (CurrentScreen == MenuScreen.Inventory)
        {
            InventoryItemIndex = MenuInv.SelectedIndex;
            Item.ItemCategory category = GetItemCategory(InventoryCategories.SelectedCategory);
            if (isUp) 
            {
                if (InventoryItemIndex == 0) InventoryItemIndex = Player.CharacterInventory.GetList(category).Count - 1;
                else InventoryItemIndex -= 1;
                InventoryLastMoveUp = true;
            } else 
            {
                if (InventoryItemIndex == Player.CharacterInventory.GetList(category).Count - 1) InventoryItemIndex = 0;
                else InventoryItemIndex += 1;
                InventoryLastMoveUp = false;
            }
            MenuInv.LastWasButton = true;
        }

        if (CurrentScreen == MenuScreen.Settings)
        {
            if (isUp)
            {
                MenuSet.SelectedIndex -= 1;
            }
            else
            {
                MenuSet.SelectedIndex += 1;
            }
        }
        if (CurrentScreen == MenuScreen.Equipment)
        {
            MenuEqu.HandleVertical(isUp);
        }
    }

    private void HandleHorizontal(bool isRight)
    {
        if (CurrentScreen == MenuScreen.Inventory)
        {
            if (isRight) InventoryCategories.CycleRight();
            else InventoryCategories.CycleLeft();
        }
        Item.ItemCategory category = GetItemCategory(InventoryCategories.SelectedCategory);
        InventoryItemIndex = 0;
        if (CurrentScreen == MenuScreen.Equipment)
        {
            MenuEqu.HandleHorizontal(isRight);
        }
    }

    private void HandleCycle(bool isRight)
    {
        if (isRight)
        {
            if (CurrentMenuCategoryIndex == 3) CurrentMenuCategoryIndex = 0;
            else CurrentMenuCategoryIndex += 1;
        } else 
        {
            if (CurrentMenuCategoryIndex == 0) CurrentMenuCategoryIndex = 3;
            else CurrentMenuCategoryIndex -= 1;
        }
        MenuScreen screen = MenuCategories[CurrentMenuCategoryIndex];
        SetCurrentScreen(screen);
        GlyphSet glyphSet = GetGlyphSet(screen);
        SetGlyphs(glyphSet);
    }

    public void SetCurrentScreen(MenuScreen screen)
    {
        CurrentScreen = screen;
        GlyphSet glyphSet = GetGlyphSet(screen);
        SetGlyphs(glyphSet);
    }

    private GlyphSet GetGlyphSet(MenuScreen screen)
    {
        switch (screen)
        {
            case MenuScreen.Status:
                return GlyphSet.GlyphsStatus;
                break;
            case MenuScreen.Equipment:
                return GlyphSet.GlyphsEquipment;
                break;
            case MenuScreen.Inventory:
                return GlyphSet.GlyphsInventory;
                break;
            case MenuScreen.Settings:
                return GlyphSet.GlyphsSettings;
                break;
            default:
                return GlyphSet.GlyphsEmpty;
        }
    }

    public void SetGlyphs(GlyphSet set)
    {
        switch (set)
        {
            case GlyphSet.GlyphsStatus:
                AvailableActions = GlyphsStatus;
                break;
            case GlyphSet.GlyphsEquipment:
                AvailableActions = GlyphsEquipment;
                break;
            case GlyphSet.GlyphsItemSelect:
                AvailableActions = GlyphsItemSelect;
                break;
            case GlyphSet.GlyphsInventory:
                AvailableActions = GlyphsInventory;
                break;
            case GlyphSet.GlyphsItemMenu:
                AvailableActions = GlyphsItemMenu;
                break;
            case GlyphSet.GlyphsSettings:
                AvailableActions = GlyphsSettings;
                break;
            default:
                AvailableActions = GlyphsEmpty;
                return;
        }
    }

    private string GetMenuScreenDescription(MenuScreen screen)
    {
        switch (screen)
        {
            case MenuScreen.Status:
                return "View your current attributes and stats";
                break;
            case MenuScreen.Equipment:
                return "Manage your equipment";
                break;
            case MenuScreen.Inventory:
                return "Manage your inventory";
                break;
            case MenuScreen.Settings:
                return "Manage game";
                break;
            default:
                return "missing description :(";
        }
    }

    private string GetMenuScreenName(MenuScreen screen)
    {
        switch (screen)
        {
            case MenuScreen.Status:
                return "man";
                break;
            case MenuScreen.Equipment:
                return "shield";
                break;
            case MenuScreen.Inventory:
                return "inventory";
                break;
            case MenuScreen.Settings:
                return "settings";
                break;
            default:
                return "missing name :(";
        }
    }

    private string GetMenuScreenIcon(MenuScreen screen)
    {
        switch (screen)
        {
            case MenuScreen.Status:
                return "man";
                break;
            case MenuScreen.Equipment:
                return "shield";
                break;
            case MenuScreen.Inventory:
                return "inventory";
                break;
            case MenuScreen.Settings:
                return "settings";
                break;
            default:
                return "missing";
        }
    }

    private Item.ItemCategory GetItemCategory(CategoriesComponent.Category category)
    {
        switch (category.Name)
        {
            case "Usable":
                return Item.ItemCategory.Usable;
                break;
            case "Shards":
                return Item.ItemCategory.Shard;
                break;
            case "Keys":
                return Item.ItemCategory.Key;
                break;
            case "Sorceries":
                return Item.ItemCategory.Sorcery;
                break;
            case "Weapons":
                return Item.ItemCategory.Weapon;
                break;
            case "Arrows":
                return Item.ItemCategory.Arrow;
                break;
            case "Armor":
                return Item.ItemCategory.Armor;
                break;
            case "Rings":
                return Item.ItemCategory.Ring;
                break;
            default:
                return Item.ItemCategory.Usable;
        }
    }
}
